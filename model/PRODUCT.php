<?php
/*
*
* -------------------------------------------------------
* CLASSNAME:        PRODUCT
* GENERATION DATE:  20.07.2021
* CLASS FILE:       /home/vmasideason/public_html/sql_class_generator/generated_classes/PRODUCT.php
* FOR MYSQL TABLE:  TBL_PRODUCT
* FOR MYSQL DB:     ryc_food_service
* -------------------------------------------------------
* CODE GENERATED BY:
* MY PHP-MYSQL-CLASS GENERATOR
* from: >> www.vmasideas.com
* -------------------------------------------------------
*
*/

require_once (__dir__ . "/Utils.php");

// **********************
// CLASS DECLARATION
// **********************

class PRODUCT implements JsonSerializable
{ // class : begin


    // **********************
    // ATTRIBUTE DECLARATION
    // **********************

    private $id_product;   // KEY ATTR. WITH AUTOINCREMENT

	private $id_category;   // (normal Attribute)
	private $name;   // (normal Attribute)
	private $description_b2b;   // (normal Attribute)
	private $id_status;   // (normal Attribute)
	private $creation_time;   // (normal Attribute)
	private $last_update_time;   // (normal Attribute)

    // **********************
	// CONSTRUCTOR METHOD
	// **********************

	public function __construct()
	{
		$a = func_get_args();
		$i = func_num_args();
		if (method_exists($this, $f = '__construct' . $i)) {
			call_user_func_array(array($this, $f), $a);
		}
	}

	public function __construct6($id_category, $name, $description_b2b, $id_status, $creation_time, $last_update_time)
	{
		try {
			global $log, $db, $IP;
			$log->trace("[$IP] Entrando a __construct6");
			$this->id_category = $id_category;
			$this->name = $name;
			$this->description_b2b = $description_b2b;
			$this->id_status = $id_status;
			$this->creation_time = $creation_time;
			$this->last_update_time = $last_update_time;
		} catch (Exception $ex) {
			$log->error("[$IP] ERROR.INICIA.PRODUCT " . $ex);
			throw $ex;
		}
	}


    /**
	 * Constructor
	 * @abstract Se recibe el id del para obtener los demas de datos de db
	 * @param id id del objeto a construir
	 */
	public function __construct1($id)
	{
		try {
			global $log, $db, $IP;
			$this->id_product = $id;
			// $db->where("id_product", Utils::convUtf8($this->id_product));
			$db->where("id_product", $this->id_product);
			$obj = $db->get('TBL_PRODUCT');
			if ($db->count > 0) {
				$this->id_category = $obj[0]["id_category"];
				$this->name = $obj[0]["name"];
				$this->description_b2b = $obj[0]["description_b2b"];
				$this->id_status = $obj[0]["id_status"];
				$this->creation_time = $obj[0]["creation_time"];
				$this->last_update_time = $obj[0]["last_update_time"];
			} else {
				$log->trace("[$IP] Obj de clase PRODUCT no encontrada: " . $id);
			}
		} catch (Exception $ex) {
			$log->error("[$IP] ERROR.PRODUCT.__construct1 " . $ex);
			throw $ex;
		}
	}

	// **********************
	// GETTER METHODS
	// **********************

	function getId_product()
	{
		return $this->id_product;
	}

	function getId_category()
	{
		return $this->id_category;
	}

	function getName()
	{
		return $this->name;
	}

	function getDescription_b2b()
	{
		return $this->description_b2b;
	}

	function getId_status()
	{
		return $this->id_status;
	}

	function getCreation_time()
	{
		return $this->creation_time;
	}

	function getLast_update_time()
	{
		return $this->last_update_time;
	}

	// **********************
	// SETTER METHODS
	// **********************

	function setId_product($val)
	{
		$this->id_product =  $val;
	}

	function setId_category($val)
	{
		$this->id_category =  $val;
	}

	function setName($val)
	{
		$this->name =  $val;
	}

	function setDescription_b2b($val)
	{
		$this->description_b2b =  $val;
	}

	function setId_status($val)
	{
		$this->id_status =  $val;
	}

	function setCreation_time($val)
	{
		$this->creation_time =  $val;
	}

	function setLast_update_time($val)
	{
		$this->last_update_time =  $val;
	}

	/**
	 * save
	 * @abstract Metodo para guardar un objeto nuevo
	 */
	public function save()
	{
		try {
			// creamos objeto de base datos
			global $log, $db, $IP;
			$log->trace("[$IP] Entrando a PRODUCT.save");

			

			$data = array(
                "id_category" => $this->id_category,
				"name" => $this->name,
				"description_b2b" => $this->description_b2b,
				"id_status" => $this->id_status,
				"creation_time" => $this->creation_time,
				"last_update_time" => $this->last_update_time
			);


			$id = $db->insert('TBL_PRODUCT', $data);

			if ($id) {
				$this->id_product = $id;
				return true;
			} else
				$log->error("[$IP] ERROR.PRODUCT.save " .  $db->getLastError());
				return false;
		} catch (Exception $ex) {
			$log->error("[$IP] ERROR.PRODUCT.save " . $ex);
			throw new Exception('Ocurrio un error al guardar los datos del objeto PRODUCT: ' . $db->getLastError());
		}
	}

	/**
	 * update
	 * @abstract Metodo para realizar la actualizacion de los datos de un objeto
	 */
	public function update()
	{
		try {

			global $log, $db, $IP;
			$log->trace("[$IP] Entrando a PRODUCT.update");
			$data = array(
				"id_category" => $this->id_category,
				"name" => $this->name,
				"description_b2b" => $this->description_b2b,
				"id_status" => $this->id_status,
				"creation_time" => $this->creation_time,
				"last_update_time" => $this->last_update_time
			);

			$db->where("id_product", $this->id_product);

			if ($db->update('TBL_PRODUCT', $data)) {
				return true;
			} else
				throw new Exception('Error al actualizar los datos del objeto : ' . $db->getLastError());
		} catch (Exception $ex) {
			$log->error("[$IP] ERROR.PRODUCT.update " . $ex);
			throw $ex;
		}
	}


    /**
	 * deactivate
	 * @abstract Metodo para realizar la desactivacion del objeto
	 */
	public function deactivate()
	{
		try {
			global $log, $db, $IP;
			$data = array(
				"id_status" => "2"
			);
			$db->where("id_product", $this->id_product);
			if ($db->update('TBL_PRODUCT', $data))
				return true;
			else
				throw new Exception('Error al desactivar el objeto: ' . $db->getLastError());
		} catch (Exception $ex) {
			$log->error("[$IP] ERROR.PRODUCT.deactivate " . $ex);
			throw $ex;
		}
	}


	/**
	 * activate
	 * @abstract Metodo para realizar la activación de la habitación
	 */
	public function activate()
	{
		try {
			global $log, $db, $IP;
			$data = array(
				"id_status" => "1"
			);
			$db->where("id_product", $this->id_product);
			if ($db->update('TBL_PRODUCT', $data))
				return true;
			else
				throw new Exception('Error al activar el objeto: ' . $db->getLastError());
		} catch (Exception $ex) {
			$log->error("[$IP] ERROR.PRODUCT.activate " . $ex);
			throw $ex;
		}
	}

    /**
	 * Serializacion de objeto
	 */
	public function jsonSerialize()
	{
		return [
			"id_product" => $this->id_product,
			"id_category" => $this->id_category,
			"name" => $this->name,
			"description_b2b" => $this->description_b2b,
			"id_status" => $this->id_status,
			"creation_time" => $this->creation_time,
			"last_update_time" => $this->last_update_time
		];
	}
	

} // class : end

?>
<?php
/*
*
* -------------------------------------------------------
* CLASSNAME:        RATING
* GENERATION DATE:  20.07.2021
* CLASS FILE:       /home/vmasideason/public_html/sql_class_generator/generated_classes/RATING.php
* FOR MYSQL TABLE:  CAT_RATING
* FOR MYSQL DB:     ryc_food_service
* -------------------------------------------------------
* CODE GENERATED BY:
* MY PHP-MYSQL-CLASS GENERATOR
* from: >> www.vmasideas.com
* -------------------------------------------------------
*
*/

require_once (__dir__ . "/Utils.php");

// **********************
// CLASS DECLARATION
// **********************

class RATING implements JsonSerializable
{ // class : begin


// **********************
// ATTRIBUTE DECLARATION
// **********************

	private $id_rating;   // KEY ATTR. WITH AUTOINCREMENT

	private $name;   // (normal Attribute)
	// **********************
	// CONSTRUCTOR METHOD
	// **********************

	public function __construct()
	{
		$a = func_get_args();
		$i = func_num_args();
		if (method_exists($this, $f = '__construct' . $i)) {
			call_user_func_array(array($this, $f), $a);
		}
	}

	public function __construct2($name,$dummy)
	{
        try 
		{
			global $log,$db,$IP;
			$log->trace("[$IP] Entrando a __construct2");   
            $this->name = $name;
        }
        catch(Exception $ex) 
		{
			$log->error("[$IP] ERROR.INICIA.RATING ".$ex); 
            throw $ex;
        }
    }


	
	/**
     * Constructor
     * @abstract Se recibe el id del para obtener los demas de datos de db
     * @param id id del objeto a construir
     */
    public function __construct1($id) 
	{
        try 
		{
				global $log,$db,$IP;
				$this->id_rating = $id;
				// $db->where("id_rating",Utils::convUtf8($this->id_rating));
				$db->where("id_rating",$this->id_rating);
				$obj = $db->get('CAT_RATING');
				if ($db->count > 0)
				{		
						$this->name = $obj[0]["name"];
				}
				else
				{
						$log->trace("[$IP] Obj de clase RATING no encontrada: ".$id); 
						
				}
        }
        catch(Exception $ex) 
		{
			$log->error("[$IP] ERROR.RATING.__construct1 ".$ex); 
            throw $ex;
        }
    }
	
	// **********************
	// GETTER METHODS
	// **********************

	function getId_rating()
	{
		return $this->id_rating;
	}

	function getName()
	{
		return $this->name;
	}

	// **********************
	// SETTER METHODS
	// **********************

	function setId_rating($val)
	{
		$this->id_rating =  $val;
	}

	function setName($val)
	{
		$this->name =  $val;
	}

	/**
     * save
     * @abstract Metodo para guardar un objeto nuevo
    */
    public function save()
	{
        try 
		{
            // creamos objeto de base datos
			global $log,$db,$IP;
			$log->trace("[$IP] Entrando a RATING.save");     	
			
			$data = Array (
			   	"name" => $this->name
				);
				 	
			$id = $db->insert ('CAT_RATING', $data);
			
			if($id)
			{
				$this->id_rating = $id;
				return true;
			}
			else
				return false;
        }
        catch(Exception $ex) 
		{
			$log->error("[$IP] ERROR.RATING.save ".$ex); 
            throw new Exception('Ocurrio un error al guardar los datos del objeto RATING: '.$db->getLastError());
        }
    }
	
	/**
     * update
     * @abstract Metodo para realizar la actualizacion de los datos de un objeto
    */
    public function update()
	{
        try {
            
			global $log,$db,$IP;
			$log->trace("[$IP] Entrando a RATING.update");    
            $data = Array (
			   	"name" => $this->name
				);
			$db->where("id_rating",$this->id_rating);	
			
			if($db->update ('CAT_RATING', $data))
			{				
				return true;
			}
				
			else
				 throw new Exception('Error al actualizar los datos del objeto : '.$db->getLastError());
        }
        catch(Exception $ex) 
		{
			$log->error("[$IP] ERROR.RATING.update ".$ex); 
            throw $ex;
        }
    }
	
	/**
     * deactivate
     * @abstract Metodo para realizar la desactivacion del objeto
     */
    public function deactivate() {
        try {
			global $log,$db,$IP;
			$data = Array (
			   "id_rating" => "2"
				);
			$db->where("id_rating",$this->id_rating);	
			if($db->update ('CAT_RATING', $data))
				return true;
			else
				 throw new Exception('Error al desactivar el objeto: '.$db->getLastError());
        }
        catch(Exception $ex) 
		{
			 $log->error("[$IP] ERROR.RATING.deactivate ".$ex);
             throw $ex;
        }
    }  
	
	
	/**
     * activate
     * @abstract Metodo para realizar la activación de la habitación
     */
    public function activate() 
	{
        try {
			global $log,$db,$IP;
			$data = Array (
			   "id_rating" => "1"
				);
			$db->where("id_rating",$this->id_rating);	
			if($db->update ('CAT_RATING', $data))
				return true;
			else
				 throw new Exception('Error al activar el objeto: '.$db->getLastError());
        }
        catch(Exception $ex) 
		{
			 $log->error("[$IP] ERROR.RATING.activate ".$ex);
             throw $ex;
        }
    }  

	
	/**
     * Serializacion de objeto
     */
    public function jsonSerialize()
    {
        return [
				"id_rating" => $this->id_rating,
				"name" => $this->name
        ];
    }


} // class : end

?>